{"version":3,"sources":["NumberForm.jsx","App.js","serviceWorker.js","index.js"],"names":["NumberForm","_this$props","this","props","name","result","unmarshalFromDecimal","value","react_default","a","createElement","className","type","onChange","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleBase","event","base","sieveInvalidChars","rawValue","target","parseInt","Number","MAX_SAFE_INTEGER","alert","concat","prohibitChars","length","setState","handleChangeDeci","asciiStr","match","handleChangeBin","handleChangeOct","handleChangeHex","decToDec","asciiDeci","decToBin","toString","decToOct","decToHex","state","src_NumberForm","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3867340c.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\n\nclass NumberForm extends Component {\n    render() {\n        const {name, unmarshalFromDecimal, value} = this.props\n        const result = unmarshalFromDecimal(value);\n\n        return (\n            <div className=\"NumberForm\">\n                <label>\n                    {name}:\n                </label>\n                <input type=\"text\" value={result} onChange={this.props.onChange}/>\n            </div>)\n\n    }\n}\n\n\nexport default NumberForm","import React, {Component} from 'react';\nimport './App.scss';\nimport NumberForm from \"./NumberForm\";\n\nclass App extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n    }\n\n    handleBase = (event, base, sieveInvalidChars) => {\n        const rawValue = event.target.value;\n        const value = parseInt(rawValue, base);\n        if (value > Number.MAX_SAFE_INTEGER) {\n            alert(`${value} is beyond Number.MAX_SAFE_INTEGER (${Number.MAX_SAFE_INTEGER})`)\n            return\n        }\n\n        const prohibitChars = sieveInvalidChars(rawValue);\n        if (prohibitChars && prohibitChars.length > 0) {\n            return\n        }\n\n        if (rawValue.length === 0) {\n            return this.setState({value: ''});\n        }\n\n        this.setState({value});\n    };\n\n    handleChangeDeci = (event) => {\n        this.handleBase(event, 10, (asciiStr) => asciiStr.match(/[^\\d]/g, ''))\n    };\n\n    handleChangeBin = (event) => {\n        this.handleBase(event, 2, (asciiStr) => asciiStr.match(/[^01]/g, ''))\n    };\n    handleChangeOct = (event) => {\n        this.handleBase(event, 8, (asciiStr) => asciiStr.match(/[^0-7]/g, ''))\n    };\n    handleChangeHex = (event) => {\n        this.handleBase(event, 16, (asciiStr) => asciiStr.match(/[^0-9a-fA-F]/g, ''))\n    };\n\n\n    decToDec = (asciiDeci) => {\n        return asciiDeci\n    };\n    decToBin = (asciiDeci) => {\n        return asciiDeci.toString(2);\n    };\n    decToOct = (asciiDeci) => {\n        return asciiDeci.toString(8);\n    };\n    decToHex = (asciiDeci) => {\n        return asciiDeci.toString(16);\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <NumberForm name=\"Decimal\"\n                            value={this.state.value}\n                            onChange={this.handleChangeDeci}\n                            unmarshalFromDecimal={this.decToDec}\n                />\n                <NumberForm name=\"Binary\"\n                            value={this.state.value}\n                            onChange={this.handleChangeBin}\n                            unmarshalFromDecimal={this.decToBin}\n                />\n                <NumberForm name=\"Octal\"\n                            value={this.state.value}\n                            onChange={this.handleChangeOct}\n                            unmarshalFromDecimal={this.decToOct}\n                />\n                <NumberForm name=\"Hexadecimal\"\n                            value={this.state.value}\n                            onChange={this.handleChangeHex}\n                            unmarshalFromDecimal={this.decToHex}\n                />\n                <div>\n                    <p>A simple tool that converts any of decimal, binary, octal and hexadecimal number into other\n                        formats simultaneously.</p>\n                    <p>Build by developer for developer and serves developer's need</p>\n                    <p>Brought to you by <i>Charnnarong Chomthiang</i></p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}